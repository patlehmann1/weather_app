{"version":3,"sources":["components/MainHeader/index.js","components/SearchBar/index.js","components/RecentSearches/index.js","components/WeatherCard/index.js","components/SearchResults/index.js","App.js","serviceWorker.js","index.js"],"names":["MainHeader","react_default","a","createElement","className","SearchBar","onSubmit","this","props","handleFormSubmit","onChange","handleInputChange","name","value","searchTerm","type","placeholder","Component","RecentSearches","recentSearches","length","map","term","index","key","onClick","handleButtonClick","WeatherCard","weatherTD","slice","Math","round","temp","humidity","weather","SearchResults","weatherData","val","components_WeatherCard","main","item","dt_txt","App","state","event","_event$target","target","_this","setState","Object","defineProperty","getWeather","query","fetch","concat","then","response","json","result","cod","list","console","log","preventDefault","toConsumableArray","components_MainHeader","components_SearchBar","components_RecentSearches","components_SearchResults","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a6053e96.chunk.js","sourcesContent":["import React from 'react';\r\nimport './MainHeader.css';\r\n\r\nconst MainHeader = () => {\r\n    return (\r\n        <div className=\"main_header\">\r\n            <p>Upcoming weather in your area! 3 Hour Increments</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainHeader;","import React, { Component } from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"searchWrap\">\r\n                <form onSubmit={this.props.handleFormSubmit} className=\"search\">\r\n                    <input\r\n                        onChange={this.props.handleInputChange}\r\n                        name=\"searchTerm\"\r\n                        value={this.props.searchTerm}\r\n                        type=\"text\" className=\"searchTerm\"\r\n                        placeholder=\"Search by City\"\r\n                    />\r\n                    <button type=\"submit\" className=\"searchButton\">\r\n                        <i className=\"fa fa-search\"></i>\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        )\r\n    };\r\n};\r\n\r\nexport default SearchBar;   ","import React from 'react';\r\nimport './RecentSearches.css';\r\n\r\nconst RecentSearches = props => {\r\n    return (\r\n        <div className=\"recentSearches\">\r\n            <p>Recent Searches</p>\r\n            {!props.recentSearches.length ? <p>Type in a city to get started!</p> :\r\n                <div className=\"searchButtons\">\r\n                    {props.recentSearches.map((term, index) =>\r\n                        <div key={index} className=\"buttonRow\">\r\n                            <button className=\"rsb\" onClick={() => props.handleButtonClick(term)}>\r\n                                {term}\r\n                            </button>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            }\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default RecentSearches;","import React from 'react';\r\nimport './WeatherCard.css';\r\n\r\nconst WeatherCard = props => {\r\n    return (\r\n        <div className=\"weatherCard\">\r\n            <p className=\"weatherFor\">Weather for: {props.weatherTD.slice(10, 16)}</p>\r\n            <p className=\"mainTemp\">{Math.round(props.temp)}Â°F</p>\r\n            <p className=\"humidity\">Humidity: {props.humidity}</p>\r\n            <p className=\"conditions\">Conditions: {props.weather}</p>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default WeatherCard;","import React from 'react';\r\nimport WeatherCard from '../WeatherCard';\r\nimport './SearchResults.css';\r\n\r\nconst SearchResults = props => {\r\n    return (\r\n        <div className=\"searchResults\"> \r\n            {props.weatherData.map((val, index) => {\r\n                return (\r\n                        <WeatherCard\r\n                            key={index}\r\n                            temp={val.main.temp}\r\n                            humidity={val.main.humidity}\r\n                            weather={val.weather.map(item => item.main)}\r\n                            weatherTD={val.dt_txt} \r\n                        />\r\n                )\r\n            })}\r\n        </div>\r\n        )\r\n\r\n};\r\n\r\nexport default SearchResults;","import React, { Component } from 'react';\nimport MainHeader from './components/MainHeader';\nimport SearchBar from './components/SearchBar';\nimport RecentSearches from './components/RecentSearches';\nimport SearchResults from './components/SearchResults';\n\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    searchTerm: '',\n    recentSearches: [],\n    weatherData: []\n  };\n\n  handleInputChange = event => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value })\n  };\n\n  getWeather = query => {\n    fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${query},us&type=like&cnt=8&units=imperial&mode=json&appid=c58ce45c0689fc1e28068d46e4bddfb8`)\n      .then(response => response.json())\n      .then(result => {\n        if (result.cod === \"404\") {\n          return \"City not found, please try again.\";\n        } else {\n          this.setState({ weatherData: result.list });\n        };\n      })\n  };\n\n  handleButtonClick = query => {\n    console.log(`You clicked ${query}!`)\n    this.getWeather(query);\n  };\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n\n    if (this.state.searchTerm) {\n      this.getWeather(this.state.searchTerm);\n      this.setState({\n        recentSearches: [...this.state.recentSearches, this.state.searchTerm],\n        searchTerm: ''\n      });\n\n    };\n\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <MainHeader />\n        <SearchBar\n          searchTerm={this.state.searchTerm}\n          handleInputChange={this.handleInputChange}\n          handleFormSubmit={this.handleFormSubmit}\n        />\n        <RecentSearches\n          recentSearches={this.state.recentSearches}\n          handleButtonClick={this.handleButtonClick}\n        />\n        <SearchResults\n          weatherData={this.state.weatherData}\n        />\n      </div>\n    );\n  };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}